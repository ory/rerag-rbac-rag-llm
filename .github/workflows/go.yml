name: Go CI

on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Run tests
      run: go test -v ./...

  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Check formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Please run 'go fmt ./...'"
          gofmt -d .
          exit 1
        fi

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.5.0
        args: --timeout=5m

  demo-test:
    runs-on: ubuntu-latest
    needs: [test, format, lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Cache Ollama installation
      uses: actions/cache@v4
      with:
        path: |
          ~/.ollama
          /usr/local/bin/ollama
        key: ollama-install-${{ runner.os }}-v2
        restore-keys: |
          ollama-install-${{ runner.os }}-

    - name: Cache Keto installation
      uses: actions/cache@v4
      with:
        path: ./.bin
        key: keto-install-${{ runner.os }}-v0.14.0

    - name: Install dependencies
      run: |
        # Install required system packages
        sudo apt-get install -y jq curl

        # Install Ollama (if not cached)
        if ! command -v ollama >/dev/null 2>&1; then
          curl -fsSL https://ollama.ai/install.sh | sh
        fi

        # Start Ollama server in background
        ollama serve &
        OLLAMA_PID=$!

        # Wait for Ollama to be ready
        echo "Waiting for Ollama to start..."
        for i in {1..30}; do
          if curl -s http://localhost:11434/api/version >/dev/null 2>&1; then
            echo "Ollama is ready"
            break
          fi
          sleep 1
        done
        
        make install
        make build

        make start-app &
        APP_PID=$!
        
        make start-keto &
        KETO_PID=$!

        # Wait for keto to be ready
        echo "Waiting for Keto to start..."
        for i in {1..30}; do
          if curl -s http://localhost:4466/health/alive >/dev/null 2>&1; then
            echo "Keto is ready"
            break
          fi
          sleep 1
        done

        # Wait for app to be ready
        echo "Waiting for service to start..."
        for i in {1..30}; do
          if curl -s http://localhost:4477/health >/dev/null 2>&1; then
            echo "Application is ready"
            break
          fi
          sleep 1
        done

        # Setup permissions and load documents
        make setup

        # Run demo
        make demo

        # Cleanup
        kill $APP_PID $KETO_PID $OLLAMA_PID 2>/dev/null || true