name: Go CI

on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Run tests
      run: go test -v ./...

  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Check formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Please run 'go fmt ./...'"
          gofmt -d .
          exit 1
        fi

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.5.0
        args: --timeout=5m

  demo-test:
    runs-on: ubuntu-latest
    needs: [test, format, lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Cache Ollama installation
      uses: actions/cache@v4
      with:
        path: |
          ~/.ollama
          /usr/local/bin/ollama
        key: ollama-install-${{ runner.os }}-v2
        restore-keys: |
          ollama-install-${{ runner.os }}-

    - name: Cache Keto installation
      uses: actions/cache@v4
      with:
        path: /usr/local/bin/keto
        key: keto-install-${{ runner.os }}-v0.14.0

    - name: Install dependencies
      run: |
        # Install jq and curl (skip apt-get update for speed - these are usually available)
        sudo apt-get install -y jq curl

        # Install Ollama if not cached
        if [ ! -f "/usr/local/bin/ollama" ]; then
          echo "Installing Ollama..."
          # Download and install Ollama without systemd (for CI environment)
          curl -L https://ollama.com/download/ollama-linux-amd64 -o ollama
          sudo chmod +x ollama
          sudo mv ollama /usr/local/bin/
          # Create required directory
          mkdir -p ~/.ollama
        else
          echo "Using cached Ollama installation"
        fi

        # Install Keto if not cached
        if [ ! -f "/usr/local/bin/keto" ]; then
          echo "Installing Keto..."
          curl -L https://github.com/ory/keto/releases/download/v0.14.0/keto_0.14.0_linux_64bit.tar.gz | tar xz
          sudo mv keto /usr/local/bin/
          sudo chmod +x /usr/local/bin/keto
        else
          echo "Using cached Keto installation"
        fi

        # Start Ollama and wait for it to be ready
        ollama serve > /dev/null 2>&1 &
        echo "Waiting for Ollama to start..."
        for i in {1..30}; do
          if curl -s http://localhost:11434/api/version >/dev/null 2>&1; then
            echo "Ollama is ready"
            break
          fi
          sleep 2
        done

    - name: Pull Ollama models
      run: |
        # Pull models (will use cache if available)
        ollama pull nomic-embed-text
        ollama pull llama3.2:1b

    - name: Build application
      run: go build -o rerag-rbac-rag-llm .

    - name: Run demo test
      run: |
        # Start services
        keto serve --config keto/config.yml &
        KETO_PID=$!

        ./rerag-rbac-rag-llm &
        APP_PID=$!
        
        keto namespace migrate up --config keto/config.yml

        # Wait for app to be ready
        echo "Waiting for application to start..."
        for i in {1..30}; do
          if curl -s http://localhost:4467/health >/dev/null 2>&1; then
            echo "Application is ready"
            break
          fi
          sleep 1
        done
        for i in {1..30}; do
          if curl -s http://localhost:4477/health >/dev/null 2>&1; then
            echo "Application is ready"
            break
          fi
          sleep 1
        done

        # Setup and run demo
        ./scripts/setup-keto-permissions.sh
        ./scripts/load_documents.sh

        # Run demo
        make demo

        # Cleanup
        kill $APP_PID $KETO_PID 2>/dev/null || true