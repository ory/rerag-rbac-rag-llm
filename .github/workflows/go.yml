name: Go CI

on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Run tests
      run: CGO_ENABLED=1 go test -v ./...

  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Check formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Please run 'go fmt ./...'"
          gofmt -d .
          exit 1
        fi

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.5.0
        args: --timeout=5m

  demo-test:
    runs-on: ubuntu-latest
    needs: [test, format, lint]

    services:
      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'

    - name: Cache Keto installation
      uses: actions/cache@v4
      with:
        path: ./.bin
        key: keto-install-${{ runner.os }}-v0.14.0

    - name: Install dependencies and build binaries
      run: |
        # Install required system packages
        sudo apt-get install -y jq curl build-essential

        make install-keto
        make deps
        make build
    - name: Setup Ollama models
      run: |
        # Wait for Ollama to be ready
        echo "Waiting for Ollama to start..."
        for i in {1..30}; do
          if curl -s http://localhost:11434/api/version >/dev/null 2>&1; then
            echo "Ollama is ready"
            break
          fi
          sleep 1
        done

        # Get the Ollama container ID
        OLLAMA_CONTAINER=$(docker ps --filter "ancestor=ollama/ollama:latest" --format "{{.ID}}" | head -1)
        echo "Ollama container: $OLLAMA_CONTAINER"

        # Pull required models using docker exec
        echo "Pulling nomic-embed-text model..."
        docker exec $OLLAMA_CONTAINER ollama pull nomic-embed-text

        echo "Pulling llama3.2:1b model..."
        docker exec $OLLAMA_CONTAINER ollama pull llama3.2:1b

        # Check if Ollama is working
        curl -sS -X POST http://127.0.0.1:11434/api/generate \
          -H "Content-Type: application/json" \
          -d '{
          "model": "llama3.2:1b",
          "prompt": "What is 2+2?",
          "stream": false
        }' | jq .

    - name: Run demo
      run: |
        make start-app &
        APP_PID=$!

        make start-keto &
        KETO_PID=$!

        # Wait for keto to be ready
        echo "Waiting for Keto to start..."
        for i in {1..30}; do
          if curl -s http://localhost:4467/health/alive >/dev/null 2>&1; then
            echo "Keto is ready"
            break
          fi
          sleep 1
        done

        # Wait for app to be ready
        echo "Waiting for service to start..."
        for i in {1..30}; do
          if curl -s http://localhost:4477/health >/dev/null 2>&1; then
            echo "Application is ready"
            break
          fi
          sleep 1
        done

        # Setup permissions and load documents
        make setup

        curl -s -X POST http://localhost:4477/query \
          -H "Authorization: Bearer alice" \
          -H "Content-Type: application/json" \
          -d '{"question": "What was the total refund amount for 2023 for John Doe?"}'

        # Run demo
        make demo

        # Cleanup
        kill $APP_PID $KETO_PID 2>/dev/null || true
